#pragma once

// Auto-generated version file - DO NOT EDIT
// This file is generated by CMake from llmcpp_version.h.in

#define LLMCPP_VERSION_MAJOR @LLMCPP_VERSION_MAJOR@
#define LLMCPP_VERSION_MINOR @LLMCPP_VERSION_MINOR@
#define LLMCPP_VERSION_PATCH @LLMCPP_VERSION_PATCH@
#define LLMCPP_VERSION "@LLMCPP_VERSION@"

namespace llmcpp {
    
    struct Version {
        static constexpr int major = LLMCPP_VERSION_MAJOR;
        static constexpr int minor = LLMCPP_VERSION_MINOR;
        static constexpr int patch = LLMCPP_VERSION_PATCH;
        static constexpr const char* string = LLMCPP_VERSION;
        
        // Semantic version check helpers
        static constexpr bool isCompatible(int reqMajor, int reqMinor = 0) {
            return major == reqMajor && 
                   (minor > reqMinor || (minor == reqMinor));
        }
        
        static constexpr bool isAtLeast(int reqMajor, int reqMinor = 0, int reqPatch = 0) {
            return (major > reqMajor) ||
                   (major == reqMajor && minor > reqMinor) ||
                   (major == reqMajor && minor == reqMinor && patch >= reqPatch);
        }
    };
    
    // Legacy compatibility
    constexpr const char* VERSION = Version::string;
    
} // namespace llmcpp 