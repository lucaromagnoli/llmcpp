name: Release

on:
  push:
    tags:
      - 'v*.*.*'  # Triggers on semantic version tags like v1.0.0, v2.1.3

env:
  CMAKE_VERSION: '3.22'

jobs:
  validate-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.extract.outputs.version }}
      is_prerelease: ${{ steps.extract.outputs.is_prerelease }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Extract version from tag
        id: extract
        run: |
          TAG=${GITHUB_REF#refs/tags/v}
          echo "version=${TAG}" >> $GITHUB_OUTPUT

          # Check if this is a prerelease (contains alpha, beta, rc)
          if [[ $TAG =~ (alpha|beta|rc) ]]; then
            echo "is_prerelease=true" >> $GITHUB_OUTPUT
          else
            echo "is_prerelease=false" >> $GITHUB_OUTPUT
          fi

          echo "Detected version: $TAG"

      - name: Validate version format
        run: |
          VERSION="${{ steps.extract.outputs.version }}"
          if ! [[ $VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9.-]+)?$ ]]; then
            echo "‚ùå Invalid version format: $VERSION"
            echo "Expected format: MAJOR.MINOR.PATCH or MAJOR.MINOR.PATCH-prerelease"
            exit 1
          fi
          echo "‚úÖ Version format is valid: $VERSION"

      - name: Check version matches CMakeLists.txt
        run: |
          VERSION="${{ steps.extract.outputs.version }}"
          CMAKE_VERSION=$(grep "project(llmcpp VERSION" CMakeLists.txt | sed 's/.*VERSION \([0-9.]*\).*/\1/')

          echo "Tag version: $VERSION"
          echo "CMake version: $CMAKE_VERSION"

          if [[ "$VERSION" != "$CMAKE_VERSION" ]]; then
            echo "‚ùå Version mismatch!"
            echo "Tag version: $VERSION"
            echo "CMake version: $CMAKE_VERSION"
            echo "Please update CMakeLists.txt to match the tag version before creating a release"
            exit 1
          fi
          echo "‚úÖ Version matches CMakeLists.txt: $VERSION"

  build-and-test:
    needs: validate-version
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        build_type: [Release]
        include:
          - os: ubuntu-latest
            cmake_args: "-DLLMCPP_BUILD_TESTS=ON -DLLMCPP_BUILD_EXAMPLES=ON"
          - os: macos-latest
            cmake_args: "-DLLMCPP_BUILD_TESTS=ON -DLLMCPP_BUILD_EXAMPLES=ON"
          - os: windows-latest
            cmake_args: "-DLLMCPP_BUILD_TESTS=ON -DLLMCPP_BUILD_EXAMPLES=ON"

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup CMake
        uses: jwlawson/actions-setup-cmake@v1.14
        with:
          cmake-version: ${{ env.CMAKE_VERSION }}

      - name: Setup vcpkg (Windows)
        if: runner.os == 'Windows'
        uses: lukka/run-vcpkg@v11
        with:
          vcpkgJsonGlob: '**/vcpkg.json'

      - name: Install dependencies (Ubuntu)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y libssl-dev nlohmann-json3-dev

      - name: Install dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install openssl nlohmann-json

      - name: Configure CMake (Windows)
        if: runner.os == 'Windows'
        run: |
          cmake -B build ${{ matrix.cmake_args }} -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -DCMAKE_TOOLCHAIN_FILE="$env:VCPKG_ROOT\scripts\buildsystems\vcpkg.cmake"

      - name: Configure CMake (Non-Windows)
        if: runner.os != 'Windows'
        run: |
          cmake -B build ${{ matrix.cmake_args }} -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}

      - name: Build
        run: |
          cmake --build build --config ${{ matrix.build_type }} --parallel

      - name: Test
        run: |
          cd build
          ctest --output-on-failure -C ${{ matrix.build_type }} --exclude-regex "integration"

      - name: Package (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          cd build
          cpack -G TGZ
          ls -la *.tar.gz

      - name: Package (Windows)
        if: runner.os == 'Windows'
        run: |
          cd build
          cpack -G ZIP
          dir *.zip

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: llmcpp-${{ needs.validate-version.outputs.version }}-${{ runner.os }}
          path: |
            build/*.tar.gz
            build/*.zip
          retention-days: 30

  create-release:
    needs: [validate-version, build-and-test]
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for changelog generation

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: release-assets

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Generate changelog and release notes
        id: changelog
        run: |
          # Get the previous tag
          PREV_TAG=$(git tag --sort=-version:refname | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+' | head -2 | tail -1)
          CURRENT_TAG=${GITHUB_REF#refs/tags/}

          echo "Generating changelog from $PREV_TAG to $CURRENT_TAG"

          # Update the changelog file
          python scripts/update-changelog.py update

          # Generate release notes for GitHub
          if [ -n "$PREV_TAG" ]; then
            RELEASE_NOTES=$(python scripts/update-changelog.py release-notes "$PREV_TAG" "$CURRENT_TAG")
          else
            # Fallback for first release
            RELEASE_NOTES="## üöÄ Initial Release"$'\n\n'"This is the first release of llmcpp."$'\n\n'"**Full Changelog**: https://github.com/${{ github.repository }}/releases/tag/$CURRENT_TAG"
          fi

          # Set output for use in release
          {
            echo "changelog<<EOF"
            echo "$RELEASE_NOTES"
            echo "EOF"
          } >> $GITHUB_OUTPUT

      - name: Update CHANGELOG.md for release
        run: |
          CURRENT_TAG=${GITHUB_REF#refs/tags/}

          # Replace [Unreleased] with the actual version and date
          sed -i "s/## \[Unreleased\] - .*/## [$CURRENT_TAG] - $(date +%Y-%m-%d)/" CHANGELOG.md

          # Add new [Unreleased] section at the top
          sed -i '/^# Changelog/a\## [Unreleased] - Unreleased' CHANGELOG.md

      - name: Commit changelog updates
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add CHANGELOG.md
          git commit -m "docs: update changelog for ${{ github.ref_name }}" || echo "No changes to commit"
          git push origin ${{ github.ref_name }}

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: "llmcpp ${{ needs.validate-version.outputs.version }}"
          body: ${{ steps.changelog.outputs.changelog }}
          prerelease: ${{ needs.validate-version.outputs.is_prerelease }}
          draft: false
          files: |
            release-assets/**/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create release summary
        run: |
          echo "## üéâ Release ${{ needs.validate-version.outputs.version }} Created!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üì¶ Assets:" >> $GITHUB_STEP_SUMMARY
          echo "- Linux (Ubuntu) build artifacts" >> $GITHUB_STEP_SUMMARY
          echo "- macOS build artifacts" >> $GITHUB_STEP_SUMMARY
          echo "- Windows build artifacts" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üîó Links:" >> $GITHUB_STEP_SUMMARY
          echo "- [Release Page](https://github.com/${{ github.repository }}/releases/tag/${{ github.ref_name }})" >> $GITHUB_STEP_SUMMARY
          echo "- [Full Changelog](https://github.com/${{ github.repository }}/compare/$PREV_TAG..${{ github.ref_name }})" >> $GITHUB_STEP_SUMMARY
