name: Release

on:
  push:
    tags:
      - 'v*.*.*'  # Triggers on semantic version tags like v1.0.0, v2.1.3

env:
  CMAKE_VERSION: '3.22'

jobs:
  validate-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.extract.outputs.version }}
      is_prerelease: ${{ steps.extract.outputs.is_prerelease }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Extract version from tag
        id: extract
        run: |
          TAG=${GITHUB_REF#refs/tags/v}
          echo "version=${TAG}" >> $GITHUB_OUTPUT

          # Check if this is a prerelease (contains alpha, beta, rc)
          if [[ $TAG =~ (alpha|beta|rc) ]]; then
            echo "is_prerelease=true" >> $GITHUB_OUTPUT
          else
            echo "is_prerelease=false" >> $GITHUB_OUTPUT
          fi

          echo "Detected version: $TAG"

      - name: Validate version format
        run: |
          VERSION="${{ steps.extract.outputs.version }}"
          if ! [[ $VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9.-]+)?$ ]]; then
            echo "‚ùå Invalid version format: $VERSION"
            echo "Expected format: MAJOR.MINOR.PATCH or MAJOR.MINOR.PATCH-prerelease"
            exit 1
          fi
          echo "‚úÖ Version format is valid: $VERSION"

      - name: Check version is newer than current
        run: |
          VERSION="${{ steps.extract.outputs.version }}"
          CMAKE_VERSION=$(grep "project(llmcpp VERSION" CMakeLists.txt | sed 's/.*VERSION \([0-9.]*\).*/\1/')

          echo "Tag version: $VERSION"
          echo "CMake version: $CMAKE_VERSION"

          # Extract base version (remove prerelease suffix for comparison)
          BASE_VERSION=$(echo "$VERSION" | sed 's/-.*//')
          BASE_CMAKE_VERSION=$(echo "$CMAKE_VERSION" | sed 's/-.*//')

          # Compare versions
          if [ "$(printf '%s\n' "$BASE_CMAKE_VERSION" "$BASE_VERSION" | sort -V | head -n1)" != "$BASE_CMAKE_VERSION" ]; then
            echo "‚ùå Version validation failed!"
            echo "Tag version: $VERSION"
            echo "CMake version: $CMAKE_VERSION"
            echo "The release version must be newer than the current version in CMakeLists.txt"
            echo "Use scripts/release.sh to properly bump the version before creating a release"
            exit 1
          fi
          echo "‚úÖ Version validation passed: $VERSION is newer than $CMAKE_VERSION"

      - name: Validate changelog is up to date
        run: |
          VERSION="${{ steps.extract.outputs.version }}"

          # Check if changelog contains the version
          if ! grep -q "## \[$VERSION\]" CHANGELOG.md; then
            echo "‚ùå Changelog validation failed!"
            echo "CHANGELOG.md does not contain version $VERSION"
            echo "Make sure to run the release script which updates the changelog before tagging"
            exit 1
          fi
          echo "‚úÖ Changelog validation passed: version $VERSION found in CHANGELOG.md"

  build-and-test:
    needs: validate-version
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        build_type: [Release]
        include:
          - os: ubuntu-latest
            cmake_args: "-DLLMCPP_BUILD_TESTS=ON -DLLMCPP_BUILD_EXAMPLES=ON"
          - os: macos-latest
            cmake_args: "-DLLMCPP_BUILD_TESTS=ON -DLLMCPP_BUILD_EXAMPLES=ON"
          - os: windows-latest
            cmake_args: "-DLLMCPP_BUILD_TESTS=ON -DLLMCPP_BUILD_EXAMPLES=ON"

    runs-on: ${{ matrix.os }}
    timeout-minutes: 30  # Add timeout to prevent runaway builds

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Improved caching for release builds
      - name: Cache CMake build
        uses: actions/cache@v4
        with:
          path: |
            build
            !build/tests/llmcpp_tests
            !build/examples
          key: release-cmake-${{ matrix.os }}-${{ matrix.build_type }}-${{ hashFiles('CMakeLists.txt', '**/CMakeLists.txt', 'src/**/*', 'include/**/*') }}
          restore-keys: |
            release-cmake-${{ matrix.os }}-${{ matrix.build_type }}-

      # Cache vcpkg packages (Windows)
      - name: Cache vcpkg packages
        if: matrix.os == 'windows-latest'
        uses: actions/cache@v4
        with:
          path: |
            ${{ github.workspace }}/vcpkg
            ${{ github.workspace }}/vcpkg_installed
          key: release-vcpkg-${{ matrix.os }}-${{ hashFiles('vcpkg.json') }}
          restore-keys: |
            release-vcpkg-${{ matrix.os }}-

      # Cache Homebrew (macOS) - only for releases
      - name: Cache Homebrew (macOS)
        if: matrix.os == 'macos-latest'
        uses: actions/cache@v4
        with:
          path: |
            ~/Library/Caches/Homebrew
            /opt/homebrew/Cellar
          key: release-homebrew-${{ hashFiles('.github/workflows/release.yml') }}
          restore-keys: release-homebrew-

      - name: Setup CMake
        uses: jwlawson/actions-setup-cmake@v1.14
        with:
          cmake-version: ${{ env.CMAKE_VERSION }}

      - name: Setup vcpkg (Windows)
        if: runner.os == 'Windows'
        uses: lukka/run-vcpkg@v11
        with:
          vcpkgJsonGlob: '**/vcpkg.json'

      - name: Install dependencies (Ubuntu)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y libssl-dev nlohmann-json3-dev

      - name: Install dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install openssl nlohmann-json

      - name: Configure CMake (Windows)
        if: runner.os == 'Windows'
        run: |
          cmake -B build ${{ matrix.cmake_args }} -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -DCMAKE_TOOLCHAIN_FILE="$env:VCPKG_ROOT\scripts\buildsystems\vcpkg.cmake"

      - name: Configure CMake (Non-Windows)
        if: runner.os != 'Windows'
        run: |
          cmake -B build ${{ matrix.cmake_args }} -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}

      - name: Build
        timeout-minutes: 20  # Reduced timeout for faster failure detection
        run: |
          cmake --build build --config ${{ matrix.build_type }} --parallel

      - name: Test
        timeout-minutes: 10  # Add timeout to tests
        run: |
          cd build
          ctest --output-on-failure -C ${{ matrix.build_type }} --exclude-regex "integration"

      - name: Package (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          cd build
          cpack -G TGZ
          ls -la *.tar.gz

      - name: Package (Windows)
        if: runner.os == 'Windows'
        run: |
          cd build
          cpack -G ZIP
          dir *.zip

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: llmcpp-${{ needs.validate-version.outputs.version }}-${{ runner.os }}
          path: |
            build/*.tar.gz
            build/*.zip
          retention-days: 30

  create-release:
    needs: [validate-version, build-and-test]
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for changelog generation

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: release-assets

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Generate release notes from changelog
        id: changelog
        run: |
          VERSION="${{ needs.validate-version.outputs.version }}"

          echo "Looking for version $VERSION in changelog..."

          # Debug: show what we're looking for
          echo "Searching for pattern: ## [$VERSION]"

          # Extract release notes from CHANGELOG.md
          if grep -q "## \[$VERSION\]" CHANGELOG.md; then
            echo "Found version $VERSION in changelog, extracting content..."

            # Get the content between the version header and the next version or end
            # Use a more robust awk script that handles the format better
            RELEASE_NOTES=$(awk -v version="$VERSION" '
              BEGIN { in_version = 0; content = "" }
              /^## \[' version '\]/ {
                in_version = 1
                next
              }
              /^## \[/ && in_version {
                exit
              }
              in_version && /^###/ {
                content = content "\n" $0
              }
              in_version && /^[[:space:]]*-/ {
                content = content "\n" $0
              }
              in_version && /^[[:space:]]*$/ && content != "" {
                content = content "\n"
              }
              END {
                if (content != "") {
                  print content
                } else {
                  print "No detailed changes found for this version."
                }
              }
            ' CHANGELOG.md)

            # Clean up the content
            RELEASE_NOTES=$(echo "$RELEASE_NOTES" | sed '/^[[:space:]]*$/d' | head -20)

            # Add header
            RELEASE_NOTES="## üöÄ What's Changed\n\n$RELEASE_NOTES"

            echo "Extracted release notes:"
            echo "$RELEASE_NOTES"
          else
            echo "Version $VERSION not found in changelog, using fallback..."
            # Fallback if changelog section not found
            RELEASE_NOTES="## üöÄ Release $VERSION\n\nThis release includes various improvements and bug fixes.\n\n**Full Changelog**: https://github.com/${{ github.repository }}/releases/tag/v$VERSION"
          fi

          # Set output for use in release
          {
            echo "changelog<<EOF"
            echo "$RELEASE_NOTES"
            echo "EOF"
          } >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: "llmcpp ${{ needs.validate-version.outputs.version }}"
          body: ${{ steps.changelog.outputs.changelog }}
          prerelease: ${{ needs.validate-version.outputs.is_prerelease }}
          draft: false
          files: |
            release-assets/**/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create release summary
        run: |
          echo "## üéâ Release ${{ needs.validate-version.outputs.version }} Created!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üì¶ Assets:" >> $GITHUB_STEP_SUMMARY
          echo "- Linux (Ubuntu) build artifacts" >> $GITHUB_STEP_SUMMARY
          echo "- macOS build artifacts" >> $GITHUB_STEP_SUMMARY
          echo "- Windows build artifacts" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üîó Links:" >> $GITHUB_STEP_SUMMARY
          echo "- [Release Page](https://github.com/${{ github.repository }}/releases/tag/${{ github.ref_name }})" >> $GITHUB_STEP_SUMMARY
