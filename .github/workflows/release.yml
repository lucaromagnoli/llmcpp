name: Release

on:
  push:
    tags:
      - 'v*.*.*'  # Triggers on semantic version tags like v1.0.0, v2.1.3
    branches:
      - 'release/**'  # Also trigger on release branches for testing

env:
  CMAKE_VERSION: '3.22'

jobs:
  check-open-prs:
    runs-on: ubuntu-latest
    outputs:
      has_open_prs: ${{ steps.check.outputs.has_open_prs }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check for open PRs
        id: check
        run: |
          # Check if there are any open PRs targeting main or develop
          OPEN_PRS=$(gh pr list --state open --base main --base develop --json number --jq 'length')
          if [ "$OPEN_PRS" -gt 0 ]; then
            echo "has_open_prs=true" >> $GITHUB_OUTPUT
            echo "⚠️ Found $OPEN_PRS open PR(s). Skipping release to avoid duplicates."
            echo "Release will run after PR is merged."
          else
            echo "has_open_prs=false" >> $GITHUB_OUTPUT
            echo "✅ No open PRs found. Proceeding with release."
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}



  validate-version:
    needs: [check-open-prs]
    if: needs.check-open-prs.outputs.has_open_prs == 'false'
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.extract.outputs.version }}
      is_prerelease: ${{ steps.extract.outputs.is_prerelease }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Extract version from tag or branch
        id: extract
        run: |
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            # Extract from tag
            VERSION=${GITHUB_REF#refs/tags/v}
          elif [[ $GITHUB_REF == refs/heads/release/* ]]; then
            # Extract from release branch name
            VERSION=${GITHUB_REF#refs/heads/release/v}
          else
            echo "❌ Unsupported ref: $GITHUB_REF"
            exit 1
          fi

          echo "version=${VERSION}" >> $GITHUB_OUTPUT

          # Check if this is a prerelease (contains alpha, beta, rc)
          if [[ $VERSION =~ (alpha|beta|rc) ]]; then
            echo "is_prerelease=true" >> $GITHUB_OUTPUT
          else
            echo "is_prerelease=false" >> $GITHUB_OUTPUT
          fi

          echo "Detected version: $VERSION"

      - name: Validate version format
        run: |
          VERSION="${{ steps.extract.outputs.version }}"
          if ! [[ $VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9.-]+)?$ ]]; then
            echo "❌ Invalid version format: $VERSION"
            echo "Expected format: MAJOR.MINOR.PATCH or MAJOR.MINOR.PATCH-prerelease"
            exit 1
          fi
          echo "✅ Version format is valid: $VERSION"

      - name: Check version is newer than current
        run: |
          VERSION="${{ steps.extract.outputs.version }}"
          CMAKE_VERSION=$(grep "project(llmcpp VERSION" CMakeLists.txt | sed 's/.*VERSION \([0-9.]*\).*/\1/')

          echo "Tag version: $VERSION"
          echo "CMake version: $CMAKE_VERSION"

          # Extract base version (remove prerelease suffix for comparison)
          BASE_VERSION=$(echo "$VERSION" | sed 's/-.*//')
          BASE_CMAKE_VERSION=$(echo "$CMAKE_VERSION" | sed 's/-.*//')

          # Compare versions
          if [ "$(printf '%s\n' "$BASE_CMAKE_VERSION" "$BASE_VERSION" | sort -V | head -n1)" != "$BASE_CMAKE_VERSION" ]; then
            echo "❌ Version validation failed!"
            echo "Tag version: $VERSION"
            echo "CMake version: $CMAKE_VERSION"
            echo "The release version must be newer than the current version in CMakeLists.txt"
            echo "Use scripts/release.sh to properly bump the version before creating a release"
            exit 1
          fi
          echo "✅ Version validation passed: $VERSION is newer than $CMAKE_VERSION"

      - name: Validate changelog is up to date
        run: |
          VERSION="${{ steps.extract.outputs.version }}"

          # Check if changelog contains the version
          if ! grep -q "## \[$VERSION\]" CHANGELOG.md; then
            echo "❌ Changelog validation failed!"
            echo "CHANGELOG.md does not contain version $VERSION"
            echo "Make sure to run the release script which updates the changelog before tagging"
            exit 1
          fi
          echo "✅ Changelog validation passed: version $VERSION found in CHANGELOG.md"

  create-release:
    needs: [check-open-prs, validate-version]
    if: needs.check-open-prs.outputs.has_open_prs == 'false'
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for changelog generation

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Generate release notes from changelog
        id: changelog
        run: |
          python3 scripts/extract-release-notes.py "${{ needs.validate-version.outputs.version }}" > release_notes.txt
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          cat release_notes.txt >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create git tag (if from release branch)
        if: startsWith(github.ref, 'refs/heads/release/')
        run: |
          VERSION="${{ needs.validate-version.outputs.version }}"
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git tag "v${VERSION}"
          git push origin "v${VERSION}"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ startsWith(github.ref, 'refs/heads/release/') && format('v{0}', needs.validate-version.outputs.version) || github.ref_name }}
          name: "llmcpp ${{ needs.validate-version.outputs.version }}"
          body: ${{ steps.changelog.outputs.changelog }}
          prerelease: ${{ needs.validate-version.outputs.is_prerelease }}
          draft: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create release summary
        run: |
          echo "## 🎉 Release ${{ needs.validate-version.outputs.version }} Created!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📝 Release Notes:" >> $GITHUB_STEP_SUMMARY
          echo "Release notes generated from CHANGELOG.md" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔗 Links:" >> $GITHUB_STEP_SUMMARY
          echo "- [Release Page](https://github.com/${{ github.repository }}/releases/tag/${{ github.ref_name }})" >> $GITHUB_STEP_SUMMARY
