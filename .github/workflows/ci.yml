name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  build-and-test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-22.04, macos-12, windows-2022]
        compiler: [gcc, clang, msvc]
        build_type: [Debug, Release]
        exclude:
          # MSVC only on Windows
          - os: ubuntu-22.04
            compiler: msvc
          - os: macos-12
            compiler: msvc
          # Use default compilers on macOS and Windows
          - os: windows-2022
            compiler: gcc
          - os: windows-2022
            compiler: clang
          - os: macos-12
            compiler: gcc

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup C++ (Linux)
      if: matrix.os == 'ubuntu-22.04'
      run: |
        sudo apt-get update
        if [ "${{ matrix.compiler }}" = "gcc" ]; then
          sudo apt-get install -y gcc-11 g++-11
          echo "CC=gcc-11" >> $GITHUB_ENV
          echo "CXX=g++-11" >> $GITHUB_ENV
        elif [ "${{ matrix.compiler }}" = "clang" ]; then
          sudo apt-get install -y clang-14
          echo "CC=clang-14" >> $GITHUB_ENV
          echo "CXX=clang++-14" >> $GITHUB_ENV
        fi
        sudo apt-get install -y libssl-dev ninja-build

    - name: Setup C++ (macOS)
      if: matrix.os == 'macos-12'
      run: |
        brew install ninja openssl
        echo "CC=clang" >> $GITHUB_ENV
        echo "CXX=clang++" >> $GITHUB_ENV
        echo "OPENSSL_ROOT_DIR=/usr/local/opt/openssl" >> $GITHUB_ENV

    - name: Setup C++ (Windows)
      if: matrix.os == 'windows-2022'
      run: |
        choco install ninja openssl
        echo "OPENSSL_ROOT_DIR=C:\Program Files\OpenSSL-Win64" >> $env:GITHUB_ENV

    - name: Configure CMake
      run: |
        cmake -B build -G Ninja \
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
          -DLLMCPP_BUILD_TESTS=ON \
          -DLLMCPP_BUILD_EXAMPLES=ON \
          -DCMAKE_INSTALL_PREFIX=install

    - name: Build
      run: cmake --build build --config ${{ matrix.build_type }}

    - name: Test
      working-directory: build
      run: ctest --output-on-failure -C ${{ matrix.build_type }}

    - name: Install
      run: cmake --install build --config ${{ matrix.build_type }}

    - name: Upload build artifacts
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: build-logs-${{ matrix.os }}-${{ matrix.compiler }}-${{ matrix.build_type }}
        path: |
          build/CMakeFiles/*.log
          build/Testing/Temporary/LastTest.log

  # Minimal build test with system dependencies
  minimal-build:
    runs-on: ubuntu-22.04
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install minimal dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake libssl-dev nlohmann-json3-dev

    - name: Configure CMake (system deps)
      run: |
        cmake -B build \
          -DCMAKE_BUILD_TYPE=Release \
          -DLLMCPP_BUILD_TESTS=ON

    - name: Build
      run: cmake --build build

    - name: Test
      working-directory: build
      run: ctest --output-on-failure

  # Memory sanitizers
  sanitizers:
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        sanitizer: [address, undefined, thread]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y clang-14 libssl-dev ninja-build

    - name: Configure CMake with sanitizer
      run: |
        cmake -B build -G Ninja \
          -DCMAKE_BUILD_TYPE=Debug \
          -DCMAKE_C_COMPILER=clang-14 \
          -DCMAKE_CXX_COMPILER=clang++-14 \
          -DCMAKE_CXX_FLAGS="-fsanitize=${{ matrix.sanitizer }}" \
          -DCMAKE_EXE_LINKER_FLAGS="-fsanitize=${{ matrix.sanitizer }}" \
          -DLLMCPP_BUILD_TESTS=ON

    - name: Build
      run: cmake --build build

    - name: Test
      working-directory: build
      run: ctest --output-on-failure
      env:
        ASAN_OPTIONS: detect_leaks=1:abort_on_error=1
        UBSAN_OPTIONS: abort_on_error=1
        TSAN_OPTIONS: abort_on_error=1

  # Documentation build
  documentation:
    runs-on: ubuntu-22.04
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Doxygen
      run: sudo apt-get update && sudo apt-get install -y doxygen graphviz

    - name: Generate documentation
      run: |
        doxygen --version
        # Add doxygen configuration when available
        echo "Documentation generation placeholder"

    - name: Deploy to GitHub Pages
      if: success()
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./docs/html
        enable_jekyll: false 