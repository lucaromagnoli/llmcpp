name: CI

on:
  push:
    branches: [ main, develop ]
    paths-ignore:  # Skip CI for documentation changes
      - '**.md'
      - 'docs/**'
      - '.github/**'
      - 'LICENSE'
  pull_request:
    branches: [ main, develop ]
    paths-ignore:  # Skip CI for documentation changes
      - '**.md'
      - 'docs/**'
      - '.github/**'
      - 'LICENSE'

jobs:
  build-and-test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        # Remove macOS from regular CI to save costs - it's 10x more expensive
        # macOS builds will only run on releases
        os: [ubuntu-22.04, windows-latest]
        build_type: [Release]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    # Cache vcpkg packages (Windows)
    - name: Cache vcpkg packages
      if: matrix.os == 'windows-latest'
      uses: actions/cache@v4
      with:
        path: |
          ${{ github.workspace }}/vcpkg
          ${{ github.workspace }}/vcpkg_installed
        key: vcpkg-${{ matrix.os }}-${{ hashFiles('vcpkg.json') }}
        restore-keys: |
          vcpkg-${{ matrix.os }}-

    # Cache CMake build directory - improved caching strategy
    - name: Cache CMake build
      uses: actions/cache@v4
      with:
        path: |
          build
          !build/tests/llmcpp_tests
          !build/examples
        key: cmake-${{ matrix.os }}-${{ matrix.build_type }}-${{ hashFiles('CMakeLists.txt', '**/CMakeLists.txt', 'src/**/*', 'include/**/*') }}
        restore-keys: |
          cmake-${{ matrix.os }}-${{ matrix.build_type }}-

    # Cache package manager dependencies
    - name: Cache apt packages (Linux)
      if: matrix.os == 'ubuntu-22.04'
      uses: actions/cache@v4
      with:
        path: |
          /var/cache/apt
          /var/lib/apt
        key: apt-${{ hashFiles('.github/workflows/ci.yml') }}
        restore-keys: apt-

    - name: Install dependencies (Linux)
      if: matrix.os == 'ubuntu-22.04'
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc g++ cmake ninja-build libssl-dev nlohmann-json3-dev

    - name: Setup C++ Environment (Windows)
      if: matrix.os == 'windows-latest'
      uses: aminya/setup-cpp@v1
      with:
        cmake: true
        ninja: true

    # Simple vcpkg setup that works with manifest mode
    - name: Setup vcpkg (Windows)
      if: matrix.os == 'windows-latest'
      uses: lukka/run-vcpkg@v11
      with:
        # Let vcpkg.json manifest handle dependencies
        vcpkgJsonGlob: '**/vcpkg.json'

    - name: Disable pre-commit hook
      run: |
        if [ -f .git/hooks/pre-commit ]; then
          mv .git/hooks/pre-commit .git/hooks/pre-commit.disabled
        fi
      shell: bash

    - name: Configure CMake (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        cmake -B build -G Ninja -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -DLLMCPP_BUILD_TESTS=ON -DCMAKE_TOOLCHAIN_FILE="$env:VCPKG_ROOT\scripts\buildsystems\vcpkg.cmake"

    - name: Configure CMake (Linux)
      if: matrix.os == 'ubuntu-22.04'
      run: |
        cmake -B build -G Ninja -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -DLLMCPP_BUILD_TESTS=ON

    - name: Build
      timeout-minutes: 15
      run: cmake --build build --config ${{ matrix.build_type }} --parallel

    - name: Test
      working-directory: build
      timeout-minutes: 10
      run: |
        echo "Running CI-safe tests (excluding integration tests)..."
        ./tests/llmcpp_tests "~[integration]" --reporter compact

    - name: Upload build artifacts
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: build-logs-${{ matrix.os }}-${{ matrix.build_type }}
        path: |
          build/CMakeFiles/*.log
          build/Testing/Temporary/LastTest.log
